import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class Runner {

    static public void main (String[] args){
        // addTwoNumbers(new ListNode(5), new ListNode(5));
        System.out.println(lengthOfLongestSubstring("dvdf"));
    }

    public static int lengthOfLongestSubstring(String s) {
        int answer = 0;
        HashSet<Character> set = new HashSet<>();

        int tempAnswer = 0;
        for(int i=0; i < s.length(); i++){
            char c = s.charAt(i);
            if(set.contains(c)){
                set.clear();
                tempAnswer = 1;
            } else {
                tempAnswer++;
                answer = (tempAnswer > answer)? tempAnswer:answer;
            }
            set.add(c);
        }

        return answer;
    }

    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // 첫번째 헤드노드
        int val = l1.val + l2.val;
    
        // 다음 자리 +1여부
        boolean boolPlus = (val > 9)? true:false;
        ListNode resNode = new ListNode((boolPlus)?val-10:val);
        ListNode returnNode = resNode;
        
        while(l1.next != null || l2.next != null){
            l1 = (l1.next == null)?new ListNode(0):l1.next;
            l2 = (l2.next == null)?new ListNode(0):l2.next;
            
            val =  l1.val + l2.val + ((boolPlus)?1:0);  // 이전에 +1됐는지여부
            boolPlus = (val > 9)? true:false;
            resNode.next = new ListNode((boolPlus)?val-10:val);
            resNode = resNode.next;
        }
        
        return returnNode;
    }
}
