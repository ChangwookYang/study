import java.util.*;

class Solution {
    HashMap<String, Boolean> map;
    
    public int solution(String numbers) {
        map = new HashMap<String, Boolean>(); 
        
        int n = numbers.length();
        permutation(numbers, new StringBuilder(""), new boolean[n], n, 0);
        
        return map.size();
    }
    
    void permutation(String numbers, StringBuilder output, boolean[] visited, int n, int depth){
        if(depth == n) {
            return;
        }

        for(int i=0; i<n; i++){
            if(visited[i] == false){
                visited[i] = true;
                output.append(numbers.charAt(i));
                
                isRight(output.toString());
                permutation(numbers, output, visited, n, depth+1);
                
                visited[i] = false;
                output.deleteCharAt(depth);
            }
        }
    }
    
    boolean isRight(String strNumber){
        int num = Integer.parseInt(strNumber);
        int n = (int)Math.sqrt(num);
        if(num < 2) return false;

        for(int i = 2; i <= n; i++){
             if(num % i == 0) return false;
        }
        
        if(map.containsKey(String.valueOf(num))) return false;
        else map.put(String.valueOf(num), true);

        return true;
    }

}
