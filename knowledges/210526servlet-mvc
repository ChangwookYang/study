
/** FrontControllerV3

1. controller에 불필요한 HttpServletRequest, HttpServletResponse를 넘겨주지 않고
  request를 model에 매핑해서 파라미터로 너겨준다.
2. dispatcherServlet에서 requestURI로 알맞은 controller를 찾아준다.
3. controller에서 service 비지니스 로직 실행 후 논리적 상대경로 view에 반환한다.
4-1. viewResolver에서 절대경로로 변환 후 반환
4-2. view에 렌더링 시, model의 값을 request에 매핑해준다.
**/

public interface ControllerV3 {
    ModelView process(Map<String, String> paramMap);
}

@WebServlet(name = "frontControllerServletV3", urlPatterns = "/front-controller/v3/*")
public class FrontControllerServletV3 extends HttpServlet {

    private Map<String, ControllerV3> controllerMap = new HashMap<>();

    public FrontControllerServletV3() {
        controllerMap.put("/front-controller/v3/members/new-form", new MemberFormControllerV3());
        controllerMap.put("/front-controller/v3/members/save", new MemberSaveControllerV3());
        controllerMap.put("/front-controller/v3/members", new MemberListControllerV3());
    }

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("FrontControllerServletV3.service");

        String requestURI = request.getRequestURI();

        ControllerV3 controller = controllerMap.get(requestURI);
        if(controller == null){
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        Map<String, String> paramMap = createParamMap(request);
        ModelView mv = controller.process(paramMap);


        MyView view = viewResolver(mv);
        view.render(mv.getModel(), request, response);
    }

    private MyView viewResolver(ModelView mv) {
        return new MyView("/WEB-INF/views/" + mv.getViewName() + ".jsp");
    }

    private Map<String, String> createParamMap(HttpServletRequest request) {
        Map<String,  String> paramMap = new HashMap<>();

        Enumeration<String> names = request.getParameterNames();
        while (names.hasMoreElements()) {
            String element = names.nextElement();
            paramMap.put(element, request.getParameter(element));
        }
        return paramMap;
    }
}
